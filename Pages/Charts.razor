@using Loteria.Data.Core
@using Loteria.Data.Helper
@using Loteria.Data.Models
@using Loteria.Data.Services
@using Loteria.Database.Pagination
@using Microsoft.AspNetCore.Mvc
@using Radzen
@using Radzen.Blazor

@inject LotoServices LotoServices

<p>Estadistica en base a los tickets generados desde el 2010 hasta hoy.</p>
<div class="charts">
    <div class="columns is-multiline is-vcentered is-mobile lg-line" style="align-items: flex-start">
        <div class="column is-12 lg-center-flex">
            <table class="table">
                <tbody>
                    <tr>
                        <th style="cursor: pointer;" @onclick=@( () => SortBy(0))>Número</th>
                        <th style="cursor: pointer;" @onclick=@( () => SortBy(1))>Frecuencia</th>
                        <th>Porcentaje(%)</th>
                    </tr>
                    @foreach (NumberData data in Data)
                    {
                        <tr>
                            <td>@string.Format("{0,2:00}", @data.Number)</td>
                            <td>@data.Frequency</td>
                            <td><b>@data.Percentage.ToString("N2")% </b></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int SelectedTicket { get; set; }

    List<NumberData> Data = new();

    bool pressed;

    protected override async Task OnParametersSetAsync()
    {
        switch (SelectedTicket)
        {
            case 0:
                Data = await DataHelper.Instance.GetLotoData();
                break;
            case 1:
                Data = await DataHelper.Instance.GetTripletaData();
                break;
            default:
                break;
        }
    }

    public void SortBy(int number)
    {
        pressed = !pressed;

        switch (number)
        {
            case 0:
                Data = pressed ? Data.OrderByDescending(x => x.Number).ToList() : Data.OrderBy(x => x.Number).ToList();
                break;
            case 1:
                Data = pressed ? Data.OrderByDescending(x => x.Frequency).ToList() : Data.OrderBy(x => x.Frequency).ToList();
                break;
            default:
                break;
        }

        StateHasChanged();
    }
}